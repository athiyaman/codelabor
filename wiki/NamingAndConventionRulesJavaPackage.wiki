#summary Naming and Convention Rules (Java Package)

= 개요 =
일반적인 Java Application 개발 시 필요한 패키지 명명법을 정의한다.


= 기본 패키지 =
도메인 역순으로 기본 패키지를 구성한다.
{{{
org.codelabor 기본 패키지
}}}

= 상위 패키지 = 
기본 패키지에 이어 상위 공통 패키지를 구성한다.

== 상위 공통 패키지 ==
업무 독립적으로 시스템 공통, 업무 공통, 예제 패키지를 둔다. 
{{{
org.codelabor.system 시스템 공통 패키지
org.codelabor.common 업무 공통 패키지
org.codelabor.example 예제 패키지
}}}
예제 패키지는 개발 서버에만 배포하도록 한다.
TestCase는 패키지로 구분하지 않고 Source Directory를 분리한다.
{{{
src/main/java 소스 코드 디렉토리 (배포됨)
src/test/java 테스트 코드 디렉토리 (배포되지 않음)
}}}

== 상위 업종 패키지 ==
업종별 패키지를 구분해서 구성해야하는 경우 상위 패키지에 업무명을 넣기 전에 업종명을 넣는다.
{{{
org.codelabor.finance.banking
}}}
처음부터 업종별 패키지를 만들 필요는 없고, 개발 소스가 여러 업종에 대해 개발되고 성숙도가 높아져 독립시켜야할 필요성이 생겼을 때 refactoring 하는 것을 권장한다.

== 상위 업무 패키지 ==
기본 패키지(혹은 상위 업종 패키지)에 이어 상위 업무 패키지를 구성한다.
업무 의존적인 패키지를 프로젝트에 맞게 구성한다.
업무명은 가급적 읽어서 의미가 파악되는 단어를 사용하도록 한다.
{{{
org.codelabor.banking 뱅킹 업무 패키지
org.codelabor.labor 노무 업무 패키지
org.codelabor.estimate 견적 업무 패키지
}}}
업무명에 대한 코드가 존재하고 의미 파악이 가능하다는 전제 하에 코드를 패키지로 사용하는 것도 가능하다.
{{{
org.codelabor.bnk 뱅킹 업무 패키지
org.codelabor.lbr 노무 업무 패키지
org.codelabor.est 견적 업무 패키지
}}}

= 하위 패키지 =
상위 패키지 아래에 주제별 패키지를 구성할 수 있다.

== 하위 공통 패키지 ==
{{{
org.codelabor.system.file 파일 관리 관련 패키지
org.codelabor.system.remoting 원격 호출 관련 패키지
org.codelabor.system.security 보안 관련 패키지
org.codelabor.common.calendar 캘린더 관련 패키지
org.codelabor.common.zip 우편번호 관련 패키지
org.codelabor.example.file 파일 관리 관련 예제 패키지
org.codelabor.example.remoting 원격 호출 관련 예제 패키지
org.codelabor.example.security 보안 관련 예제 패키지
org.codelabor.example.calendar 캘린더 관련 예제 패키지
org.codelabor.example.zip 우편번호 관련 예제 패키지
org.codelabor.example.helloworld 헬로 월드 예제 패키지
}}}

== 하위 업무 패키지 ==
하위 업무가 있을 경우, 패키지를 추가할 수 있다.

== 패턴 패키지 ==
특정 패턴 클래스를 만들 정도로 패키지가 충분히 정의되었다면 탑재될 패턴명으로 패키지를 구성한다.
{{{
org.codelabor.system.file.advice 파일 관리 AOP 관련 패키지
org.codelabor.system.file.dao 파일 관리 DAO 관련 패키지
org.codelabor.system.file.dto 파일 관리 DTO 관련 패키지
org.codelabor.system.file.exception 파일 관리 Exception 관련 패키지
org.codelabor.system.file.listener 파일 관리 Listener 관련 패키지
org.codelabor.system.file.manager 파일 관리 Manager 관련 패키지
org.codelabor.system.file.service 파일 관리 Service 관련 패키지
org.codelabor.system.file.util 파일 관리 Utility 관련 패키지
org.codelabor.system.file.web 파일 관리 Web 관련 패키지
}}}

= 상황별 패키지 구조 확장 형태 =

== 3rd Party 제품을 확장하는 경우 ==
동일 인터페이스를 구현하는 복수 구현체가 존재하되, 특정사 제품에 의존적인 경우, 해당 제품명으로 패키지를 구성한다. (사명이 아닌 제품명을 사용)
{{{
org.codelabor.system.util.xplatform
org.codelabor.system.web.filter.xplatform
org.codelabor.system.web.controller.xplatform
}}}

== 패키지 복수형 표현을 사용하는 경우 ==
동일 패턴에 해당하는 복수 구현 클래스가 탑재될 경우, 패키지 이름을 복수형으로 사용할 수 있다.
{{{
org.codelabor.system.services 동일 레벨에 복수 서비스가 탑재되는 경우
}}}

== 구현 패키지는 사용 금지 ==
인터페이스와 구현 클래스의 구분은 클래스명으로 구분하므로 패키지로 구분할 필요는 없다. (예: FileManager는 인터페이스, FileManagerImpl는 구현 클래스)
{{{ 
~~org.codelabor.system.file.manager.impl~~ 사용하지 않음
}}}

같은 이유로 인터페이스를 표현하기 위한 패키지 역시 사용하지 않는다.
{{{ 
~~org.codelabor.system.file.manager.inf~~ 사용하지 않음
}}}
기능적으로 인터페이스가 필요한 모듈일 경우, interface라는 패키지를 사용하지 않고 remoting.http, remoting.tcp 와 같은 형태로 명명한다.
{{{
org.codelabor.system.remoting.http HTTP 프로토콜 관련
org.codelabor.system.remoting.tcp TCP 프로토콜 관련
}}}