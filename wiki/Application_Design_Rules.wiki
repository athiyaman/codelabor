=아키텍처/어플리케이션 설계의 기본 사상과 규칙=
==Risk는 조기 탐지되도록 하여 조기 진압이 가능하게 한다.==
  * 개발 단계에서의 생산성 확보 보다 개발 이후 단계에서의 이슈로 발생하는 품질 비용 절감을 우선 시 한다. 
  * 로컬 개발 환경과 운영 환경간의 환경 차를 최대한 줄여 결과적으로 배포, 이행 후 발생할 잠재 위험을 조기에 발견하여 진압할 수 있도록 한다.


==보편적이고 널리 알려진 구현 기술을 사용하여 초기 학습 비용을 낮춘다.==
  * 개발자 커뮤니티에 널리 알려진 구현 기술을 사용하여 이슈 발생 시, 외부 참조가 용이하게 한다.
  * 개발 진척 부진 시, 추가 개발자 수배, 증원이 용이한 보편적인 구현 기술을 사용한다.
  * 개발자에 비해 상대적으로 최신 기술 트렌드, 숙련도가 낮은 유지보수자의 조기 전략화를 가능하게 한다. 
  * 기술 지원이 불투명한 특정 사 의존적인 기술을 Black Box 형태로 활용하는 것을 지양하여 장애 발생 시 발생할 잠재 병목을 제거한다.


==정보 참조가 용이한 구현 기술을 사용하여 신속한 트러블 슈팅이 가능해야 한다.==
  * 공식 홈페이지의 Reference, Tutorial, Example을 익힐 경우, 무리 없이 활용 가능한 수준을 유지한다.
  * 시중 서적, 개발자 커뮤니티의 강좌로 Self Study 할 경우, 무리 없이 활용 가능한 수준을 유지한다.
  * Google 검색만으로도 필요 정보를 얻을 수 있는 기술 조합을 사용한다.

==SW 선정 시에는 출처가 신뢰할만하고 개발 조직의 안정성, 기술 지원의 지속 가능성을 고려하여  선정한다.==
  * 도입이 필요한 SW 선정 시, 적용 사례와 사용자 경험, 현장 트러블 슈팅 사례가 축적되어 잠재 위험이 제거된 제품이 우선한다.
  * 외부 의존 Library는 보안과 핵심 업무 로직을 포함한 것이 아니라면 Open Source로 공개된 것이 우선한다.