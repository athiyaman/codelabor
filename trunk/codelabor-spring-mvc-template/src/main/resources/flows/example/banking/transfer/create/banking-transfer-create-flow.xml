<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
        http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
        start-state="enterTransferInformation">

	<var name="transferList" class="java.util.ArrayList" />

	<view-state id="enterTransferInformation"
		view="example.banking.transfer.create.enterTransferInformation.definition" model="transfer">
		<binder>
			<binding property="withdrawalAccountNo" required="true"/>
			<binding property="withdrawalAccountMemo"/>
			<binding property="transferPassword" required="true"/>
			<binding property="transferAmount" required="true"/>
			<binding property="receivingBankCode" required="true"/>
			<binding property="receivingAccountNo" required="true"/>
			<binding property="receivingAccountMemo"/>
			<binding property="cmsNo"/>
		</binder>
		<on-entry>
			<evaluate expression="exampleBankingAccountManager.getWithdrawalAccountList(currentUser.name)"
			 	result="flowScope.withdrawalAcountList" />
			<evaluate expression="exampleBankingBankManager.getBankList()"
			 	result="flowScope.bankList" />
			<evaluate expression="exampleBankingTransferService.createTransfer(currentUser.name)"
			 	result="viewScope.transfer" />
		</on-entry>
		<transition on="addTransfer">
			<evaluate expression="exampleBankingAccountManager.getReceivingAccount(transfer.receivingBankCode, transfer.receivingAccountNo)" result="viewScope.receivingAccount"/>
			<evaluate expression="transfer.setReceiverName(receivingAccount.getCustomerName())" />
			<evaluate expression="transferList.add(transfer)" />
		</transition>
		<transition on="removeTransfer">
			<evaluate expression="transferList.remove(transferIndex)" />
		</transition>
		<transition on="transfer" to="checkSecurityType" bind="false" />
	</view-state>

	<!--
	<view-state id="checkUnavailableBankList" view="example.banking.bank.unavailable.bank.list.definition">
		<on-render>
			<evaluate expression="exampleBankingBankManager.getUnavailableBankList()"
				result="viewScope.bankUnavailableList" />
		</on-render>
		<transition on="close" to="enterTransferInformation" />
	</view-state>

	<view-state id="checkAvailableAmount">
	</view-state>

	<view-state id="showFrequentUsedAccount" view="example.banking.account.frequent.used.account.listdefinition">
		<on-render>
			<evaluate expression="exampleBankingAccountManager.getFrequentUsedAccountList(currentUser.name)"
				result="viewScope.frequentUsedAccountList" />
		</on-render>
		<transition on="close" to="enterTransferInformation">
			<evaluate expression="transfer.setReceivingAccountNo(requestParameters.receivingAccountNo)" />
		</transition>
	</view-state>
	-->

	<decision-state id="checkSecurityType">
		<if test="exampleBankingCustomerService.isOTPUser(currentUser.name)"
			then="enterOTPCode"
			else="enterSecurityCardNo"/>
	</decision-state>

	<view-state id="enterOTPCode"
		view="example.banking.transfer.create.enterOTPCode.definition" model="password">
		<binder>
			<binding property="otpPassword" required="true"/>
		</binder>
		<on-render>
			<evaluate expression="exampleBankingTransferService.createPassword(currentUser.name)"
				result="viewScope.password" />
		</on-render>
		<transition on="confirm" to="transferResult" />
	</view-state>

	<view-state id="enterSecurityCardNo"
		view="example.banking.transfer.create.enterSecurityCardNo.definition" model="password">
		<binder>
			<binding property="securityCardNumber1" required="true"/>
			<binding property="securityCardNumber2" required="true"/>
		</binder>
		<on-render>
			<evaluate expression="exampleBankingTransferService.createPassword(currentUser.name)"
				result="viewScope.password" />
		</on-render>
		<transition on="confirm" to="transferResult" />
	</view-state>

	<end-state id="transferResult"
		view="example.banking.transfer.create.transferResult.definition">
	</end-state>
</flow>