<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"	
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	
	<!--
		[PROPAGATION] 
		REQUIRED: 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, 새 tx를 생성하고 실행 
		SUPPORTS: 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, 그냥 실행
		MANDATORY: 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, Exception 발생
		REQUIRES_NEW: 이미 tx가 존재할 경우, 해당 tx suspend 시키고 새 tx를 생성 / tx가 없을 경우, 새 	tx를 생성 
		NOT_SUPPORTED: 이미 tx가 존재할 경우, 해당 tx suspend 시키고 tx없이 실행 / tx가  없을 경우, 그냥 실행 NEVER: 이미 tx가 존재할 경우, Exception 발생 / tx가 없을 경우, tx없이 실행
		NESTED: 이미 tx가 존재할 경우, 해당 tx에 참여 / tx가 없을 경우, nested tx 실행 
		
		[ISOLATION]
		DEFAULT: datastore에 의존 
		READ_UNCOMMITTED: Dirty reads, Non-repeatable reads, Phantom reads 발생 
		READ_COMMITTED: Dirty reads 방지, Non-repeatable 	reads, Phantom reads 발생 
		REPEATABLE_READ: Non-repeatable Read 방지, Phantom reads 발생 
		SERIALIZABLE: Phantom Read 방지
	-->
 
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="oracleDataSource" />
	</bean>
	
	<!-- 
	<bean id="txManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManagerName"
		value="java:/TransactionManager" /> <property name="jndiTemplate"
		ref="jndiJeusTemplate"></property> <property
		name="allowCustomIsolationLevels" value="true"/> </bean>
	 -->

		
	<!-- service -->
	<tx:advice id="serviceTxAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*"
				rollback-for="org.codelabor.system.exceptions.RollbackCommonException"
				no-rollback-for="org.codelabor.system.exceptions.NoRollbackCommonException"
				propagation="REQUIRED" timeout="600" />
			<tx:method name="select*" rollback-for="RollbackCommonException"
				propagation="SUPPORTS" read-only="true"
				timeout="20" />
			<tx:method name="find*" rollback-for="RollbackCommonException"
				propagation="SUPPORTS" read-only="true"
				timeout="20" />
		</tx:attributes>
	</tx:advice>
	
	<!-- manager -->
	<tx:advice id="managerTxAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*"
				rollback-for="org.codelabor.system.exceptions.RollbackCommonException"
				no-rollback-for="org.codelabor.system.exceptions.NoRollbackCommonException"
				propagation="REQUIRED" timeout="600" />
			<tx:method name="select*" rollback-for="RollbackCommonException"
				propagation="SUPPORTS" read-only="true"
				timeout="20" />
			<tx:method name="find*" rollback-for="RollbackCommonException"
				propagation="SUPPORTS" read-only="true"
				timeout="20" />
		</tx:attributes>
	</tx:advice>
	
	<!-- dao -->
	<tx:advice id="daoTxAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*"
				rollback-for="org.codelabor.system.exceptions.RollbackCommonException"
				no-rollback-for="org.codelabor.system.exceptions.NoRollbackCommonException"
				propagation="REQUIRED" timeout="600" />
			<tx:method name="select*" rollback-for="RollbackCommonException"
				propagation="SUPPORTS" read-only="true"
				timeout="20" />
			<tx:method name="find*" rollback-for="RollbackCommonException"
				propagation="SUPPORTS" read-only="true"
				timeout="20" />
		</tx:attributes>
	</tx:advice>

	<!-- tx advice -->
	<aop:config>
		<aop:advisor advice-ref="serviceTxAdvice" pointcut-ref="serviceMethod" />
		<aop:advisor advice-ref="managerTxAdvice" pointcut-ref="managerMethod" />
		<aop:advisor advice-ref="daoTxAdvice" pointcut-ref="daoMethod" />
	</aop:config>
</beans>